# #!/usr/bin/python

# """
# This module contains a set of commands for communication with Thyracont VSP transducers
# based on PyVISA library and custom data_packages module.

# Author: Mikhail Bannikov bannikovmi96@gmail.com
# """

# # standard library imports
# import sys

# # third party imports
# # pyqt-related imports
# from PyQt5.QtWidgets import QApplication, QGridLayout, QMainWindow, QTabWidget, QWidget

# # local gui imports
# from positioning.drives.params import QDriveParams

# # load configurations
# import tomli
# with open("config.toml", mode='rb') as config_file:
#     config = tomli.load(config_file)

# class MainWindow(QMainWindow):

#     def __init__(self, config):
        
#         super().__init__()

#         self.config = config
#         self.initUI()

#     def initUI(self):

#         self.central_widget = QWidget()
#         self.setCentralWidget(self.central_widget)

#         self.grid = QGridLayout()
#         self.central_widget.setLayout(self.grid)

#         self.params_widget = QDriveParams(config, name='DRX')
#         self.grid.addWidget(self.params_widget, 0, 0)

#         # Resize main window and set title
#         self.setWindowTitle('Lithography')
#         self.show()

# def main():

#     app = QApplication(sys.argv)
#     window = MainWindow(config)

#     sys.exit(app.exec_())

# if __name__ == '__main__':
#     main()

import numpy as np
con_times = [0.453784704208374, 0.2057023048400879, 0.1995067596435547, 0.19983720779418945, 0.19844269752502441, 0.20558619499206543, 0.20000481605529785, 0.2317512035369873, 0.20996522903442383, 0.2208874225616455, 0.21009230613708496, 0.20518159866333008, 0.21369409561157227, 0.6860475540161133, 0.5053019523620605, 0.19663214683532715, 0.19982481002807617, 0.19803643226623535, 0.20003962516784668, 0.20175576210021973, 0.36316370964050293, 0.20409488677978516, 0.20760512351989746, 0.19911408424377441, 0.20657062530517578, 0.20724987983703613, 0.22423529624938965, 0.2078871726989746, 0.2015078067779541, 0.21610808372497559, 0.26419830322265625, 0.2044079303741455, 0.21112608909606934, 0.20438146591186523, 0.24800610542297363, 0.21088814735412598, 0.20153474807739258, 0.24016189575195312, 0.3251068592071533, 0.20581912994384766, 0.2059497833251953, 0.22612738609313965, 0.8681361675262451, 0.2630486488342285, 0.20079803466796875, 0.27306699752807617, 0.2156534194946289, 0.21063446998596191, 0.21263790130615234, 0.20300817489624023, 0.20481157302856445, 0.21774911880493164, 0.20939278602600098, 0.21504735946655273, 0.2052459716796875, 0.20317530632019043, 0.20764565467834473, 0.20218205451965332, 0.19385027885437012, 0.20432496070861816, 0.19737792015075684, 0.287722110748291, 0.33882927894592285, 0.3221874237060547, 0.31183648109436035, 0.30492472648620605, 0.21005654335021973, 0.30817246437072754, 0.39345669746398926, 0.22816014289855957, 0.22150897979736328, 0.22985506057739258, 0.2104339599609375, 0.20238232612609863, 0.20473217964172363, 0.20350098609924316, 0.20042133331298828, 0.20163941383361816, 0.2034306526184082, 0.20029282569885254, 0.20011544227600098, 0.2937633991241455, 0.20125508308410645, 0.22644925117492676, 0.20963549613952637, 0.3245387077331543, 0.25874996185302734, 0.1993722915649414, 0.19976091384887695, 0.1968238353729248, 9.832022190093994, 1.235032558441162, 0.6166346073150635, 0.3132133483886719, 1.0355217456817627, 0.1970810890197754, 0.20441412925720215, 0.2067885398864746, 0.2009110450744629, 0.20498204231262207]
print(np.min(con_times), np.max(con_times), np.mean(con_times), np.std(con_times))